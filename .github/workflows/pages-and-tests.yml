name: Deploy to GitHub Pages (tests on demand)

on:
  push:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      run_tests:
        description: "Run Playwright UI tests after deploy?"
        required: true
        default: "false"
        type: choice
        options: ["true", "false"]
      features:
        description: "Comma-separated feature names to test (e.g., 'Mobile Nav,Accessibility'). Leave empty to auto-detect or use ids."
        required: false
        type: string
      ids:
        description: "Comma-separated test IDs to run (e.g., 'MN-001,BG-001')."
        required: false
        type: string
      base_url:
        description: "Override TEST_BASE_URL; if empty, uses repo variable or deployed Pages URL."
        required: false
        type: string

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    name: Build static site artifact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Stage site content
        run: |
          set -euxo pipefail
          mkdir -p site
          rsync -av \
            --delete \
            --exclude ".git" \
            --exclude ".github" \
            --exclude "node_modules" \
            --exclude "scripts" \
            --exclude "tests" \
            --exclude "netlify" \
            --exclude "**/*.ps1" \
            ./ site/

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build
    outputs:
      page_url: ${{ steps.deployment.outputs.page_url }}
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy
        id: deployment
        uses: actions/deploy-pages@v4

  select-tests:
    name: Select tests (auto or inputs)
    runs-on: ubuntu-latest
    needs: deploy
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.run_tests == 'true' }}
    outputs:
      matrix: ${{ steps.build.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure jq is available
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi

      - name: Determine changed files
        id: changes
        run: |
          set -euxo pipefail
          BEFORE="${{ github.event.before }}"
          SHA="${{ github.sha }}"
          if [ -z "$BEFORE" ]; then
            BEFORE=$(git rev-parse "$SHA^" || true)
          fi
          echo "BEFORE=$BEFORE" >> "$GITHUB_ENV"
          echo "SHA=$SHA" >> "$GITHUB_ENV"
          if [ -n "$BEFORE" ]; then
            git diff --name-only "$BEFORE" "$SHA" | tee changed.txt
          else
            git show --name-only --pretty="" "$SHA" | tee changed.txt
          fi
          echo "Changed files:"; cat changed.txt || true

      - name: Build test matrix
        id: build
        env:
          INPUT_FEATURES: ${{ inputs.features }}
          INPUT_IDS: ${{ inputs.ids }}
        run: |
          set -euo pipefail
          INPUT_FEATURES="${INPUT_FEATURES:-}"
          INPUT_IDS="${INPUT_IDS:-}"
          # Primary: explicit IDs
          if [ -n "$INPUT_IDS" ]; then
            json=$(jq -n --arg ids "$INPUT_IDS" '{include: [{include_ids: $ids}]}')
            echo "matrix=$json" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          # Secondary: explicit features
          if [ -n "$INPUT_FEATURES" ]; then
            IFS=',' read -ra FEATS <<< "$INPUT_FEATURES"
            inc_items=()
            for f in "${FEATS[@]}"; do
              f_trim=$(echo "$f" | xargs)
              [ -z "$f_trim" ] && continue
              inc_items+=("$(jq -n --arg f "$f_trim" '{feature: $f}')")
            done
            if [ ${#inc_items[@]} -eq 0 ]; then
              echo "No valid features specified." >&2
              exit 1
            fi
            # Build array JSON
            inc_json=$(printf '%s\n' "${inc_items[@]}" | jq -sc '.')
            json=$(jq -n --argjson inc "$inc_json" '{include: $inc}')
            echo "matrix=$json" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          # Auto-detect by changed files
          mapfile -t CHANGED < changed.txt || true
          add_feature() {
            feat="$1"
            if ! grep -Fxq "$feat" sel.txt 2>/dev/null; then
              echo "$feat" >> sel.txt
            fi
          }
          : > sel.txt
          for p in "${CHANGED[@]}"; do
            # Mobile Nav
            for g in "index.html" "src/js/main.js" "src/js/recommender.js" "src/components/" "src/css/"; do
              if [[ "$p" == "$g"* ]]; then add_feature "Mobile Nav"; fi
            done
            # Background Fix
            for g in "index.html" "src/css/" "src/js/main.js"; do
              if [[ "$p" == "$g"* ]]; then add_feature "Background Fix"; fi
            done
            # Accessibility
            for g in "index.html" "src/css/"; do
              if [[ "$p" == "$g"* ]]; then add_feature "Accessibility"; fi
            done
            # Admin endpoints
            if [[ "$p" == "netlify/functions/"* ]]; then
              add_feature "Admin Health Endpoint"
              add_feature "Admin Dispatch Endpoint"
            fi
            # Legacy
            if [[ "$p" == "public/"* ]]; then
              add_feature "Legacy Cleanup"
            fi
          done
          if [ ! -s sel.txt ]; then
            printf '%s\n' "Mobile Nav" "Background Fix" "Accessibility" > sel.txt
          fi
          inc_items=()
          while IFS= read -r feat; do
            inc_items+=("$(jq -n --arg f "$feat" '{feature: $f}')")
          done < sel.txt
          inc_json=$(printf '%s\n' "${inc_items[@]}" | jq -sc '.')
          json=$(jq -n --argjson inc "$inc_json" '{include: $inc}')
          echo "matrix=$json" >> "$GITHUB_OUTPUT"

  ui-tests:
    name: Playwright UI tests (on-demand)
    runs-on: ubuntu-latest
    needs: [deploy, select-tests]
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.run_tests == 'true' }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.select-tests.outputs.matrix) }}
    env:
      TEST_BASE_URL_VAR: ${{ inputs.base_url || vars.TEST_BASE_URL }}
      DEPLOYED_URL: ${{ needs.deploy.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set TEST_BASE_URL
        id: seturl
        run: |
          URL="${TEST_BASE_URL_VAR:-$DEPLOYED_URL}"
          echo "Using TEST_BASE_URL=$URL"
          echo "TEST_BASE_URL=$URL" >> "$GITHUB_ENV"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r tests/requirements.txt

      - name: Install Playwright browsers
        run: |
          python -m playwright install --with-deps

      - name: Run UI tests
        env:
          TEST_BASE_URL: ${{ env.TEST_BASE_URL }}
        run: |
          if [ -n "${{ matrix.include_ids }}" ]; then
            echo "Running by IDs: ${{ matrix.include_ids }}"
            python tests/run_ui_tests.py --ids "${{ matrix.include_ids }}"
          else
            echo "Running feature: ${{ matrix.feature }}"
            python tests/run_ui_tests.py --features "${{ matrix.feature }}"
          fi

      - name: Upload UI test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ui-test-artifacts-${{ matrix.feature || 'ids' }}
          path: |
            tests/**/*.csv
            tests/**/*.xlsx
            tests/**/screenshots/**
          if-no-files-found: warn
