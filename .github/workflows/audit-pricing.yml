name: Audit Pricing

on:
  schedule:
    - cron: '30 3 * * *' # Nightly at 03:30 UTC
  workflow_dispatch:
    inputs:
      strict:
        description: 'Fail the audit on any anomaly (true) or only on critical conflicts (false)'
        required: false
        default: 'true'

jobs:
  audit:
    runs-on: ubuntu-latest
    env:
      PRICING_AUDIT_STRICT: ${{ github.event.inputs.strict || 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      # Optionally fetch the latest tools from Firestore so the audit uses
      # the current catalog at run time. Provide one of these repository secrets:
      # - FIREBASE_SA_JSON: the full JSON content of the service account (as a single secret)
      # - FIREBASE_SA_BASE64: the base64-encoded JSON (useful for multiline secrets)
      - name: Prepare Firebase credentials (optional)
        id: fbcreds
        shell: bash
        env:
          FIREBASE_SA_JSON: ${{ secrets.FIREBASE_SA_JSON }}
          FIREBASE_SA_BASE64: ${{ secrets.FIREBASE_SA_BASE64 }}
        run: |
          set -e
          FILE="$RUNNER_TEMP/firebase-sa.json"
          if [ -n "${FIREBASE_SA_JSON:-}" ]; then
            echo "$FIREBASE_SA_JSON" > "$FILE"
            echo "GOOGLE_APPLICATION_CREDENTIALS=$FILE" >> "$GITHUB_ENV"
            echo "wrote=json" >> "$GITHUB_OUTPUT"
          elif [ -n "${FIREBASE_SA_BASE64:-}" ]; then
            echo "$FIREBASE_SA_BASE64" | base64 -d > "$FILE"
            echo "GOOGLE_APPLICATION_CREDENTIALS=$FILE" >> "$GITHUB_ENV"
            echo "wrote=base64" >> "$GITHUB_OUTPUT"
          else
            echo "No Firebase service account provided; skipping export."
            echo "wrote=none" >> "$GITHUB_OUTPUT"
          fi

      - name: Export latest tools from Firestore (optional)
        if: env.GOOGLE_APPLICATION_CREDENTIALS != ''
        run: |
          node ./scripts/export-tools.mjs --key "$GOOGLE_APPLICATION_CREDENTIALS"

      - name: Run pricing audit
        run: npm run audit:pricing

      - name: Print audit summary
        run: |
          node -e "const fs=require('fs'); const j=JSON.parse(fs.readFileSync('data/pricing-audit.json','utf8')); console.log('Counts:', j.counts); if (j.anomalies && j.anomalies.length){ console.log('First anomalies (max 20):'); j.anomalies.slice(0,20).forEach((a,i)=>console.log(i+1, a)); } else { console.log('No pricing anomalies.'); }"

      - name: Upload audit artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pricing-audit
          path: |
            data/pricing-audit.json
            data/pricing-audit.md

      - name: Enforce zero anomalies
        run: |
          node -e "const fs=require('fs'); const strict=(process.env.PRICING_AUDIT_STRICT||'true').toLowerCase()==='true'; const j=JSON.parse(fs.readFileSync('data/pricing-audit.json','utf8')); const anomalies=Array.isArray(j.anomalies)?j.anomalies:[]; const critical=anomalies.filter(a=>/conflict/i.test(a.reason)); console.log('Anomalies total:', anomalies.length, 'critical:', critical.length, 'strict:', strict); if ((strict && anomalies.length>0) || (!strict && critical.length>0)) { console.error('Pricing anomalies found:', anomalies.length, 'critical:', critical.length); process.exit(1); } else { console.log('Audit passed with', anomalies.length, 'anomalies (critical:', critical.length, '), strict:', strict); }"

  auto-fix:
    needs: audit
    if: failure()
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install deps
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install; fi
      - name: Generate pricing overrides from anomalies
        run: node ./scripts/generate-pricing-overrides.mjs
      - name: Create PR with overrides
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "chore(pricing): add overrides generated from audit"
          title: "chore(pricing): add overrides generated from audit"
          body: |
            This PR was created automatically because the Audit Pricing workflow detected anomalies.
            The script generated/updated `data/pricing-overrides.json` with suggested canonical pricing labels.
            Review and merge to resolve the audit failure.
          branch: ci/pricing-overrides
          delete-branch: true

      - name: Commit audit summary (optional)
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add data/pricing-audit.*
            git commit -m "chore(pricing): update audit report (CI)" || true
            git push || true
          fi
